// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  password     String
  level        String         @default("user") // user, admin, engineer
  createdAt    DateTime       @default(now())
  status       String         @default("active") // active, inactive
  sectionId    Int?
  section      Section?       @relation(fields: [sectionId], references: [id])
  RepairRecord RepairRecord[]
}

model Device {
  id           Int            @id @default(autoincrement())
  name         String
  barcode      String
  serial       String
  expireDate   DateTime
  remark       String?
  status       String         @default("active") // active, inactive
  createdAt    DateTime       @default(now())
  RepairRecord RepairRecord[]
}

// แผนก
model Department {
  id        Int       @id @default(autoincrement())
  name      String
  status    String    @default("active") // active, inactive
  createdAt DateTime  @default(now())
  sections  Section[]
}

// ฝ่าย
model Section {
  id           Int        @id @default(autoincrement())
  name         String
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  status       String     @default("active") // active, inactive
  createdAt    DateTime   @default(now())
  users        User[]
}

model RepairRecord {
  id                Int       @id @default(autoincrement())
  customerName      String
  customerPhone     String
  deviceName        String
  deviceBarcode     String
  deviceSerial      String
  problem           String
  solving           String
  deviceId          Int?
  device            Device?   @relation(fields: [deviceId], references: [id])
  userId            Int?
  user              User?     @relation(fields: [userId], references: [id])
  engineerId        Int?
  status            String    @default("active") // active, inactive
  createdAt         DateTime  @default(now())
  endJobDate        DateTime?
  payDate           DateTime?
  amount            Int?
  imageBeforeRepair String?
  imageAfterRepair  String?
  expireDate        DateTime?
}

// bunx prisma db push
// bunx prisma generate
